#!/bin/sh
python3 clean/limpiar-juegos.py
python3 convert/convertir-juegos.py
mongoimport --host localhost --db=practica_1-2 --collection=JuegosTemp datasets/Juegos.json
mongosh << EOF
use practica_1-2;
db.Juego.drop();
db.createCollection("Juego", {validator: {\$jsonSchema: {bsonType: "object", title: "Validador de juegos", required: ["id", "nombre", "modelo", "estadoOperativo", "accesibilidad", "fechaInstalacion", "tipo", "desgasteAcumulado", "indicadorExposicion", "mantenimientos", "incidencias"], properties: {id: {bsonType: "string", description: "Id del juego. Es obligatorio y debe ser un string"}, nombre: {bsonType: "string", description: "Nombre del juego. Es obligatorio y debe ser un string"}, modelo: {bsonType: "string", description: "Modelo del juego. Es obligatorio y debe ser un string"}, estadoOperativo: {bsonType: "string", enum: ["EN MANTENIMIENTO", "OPERATIVO", "NO OPERATIVO"], description: "Estado actual del juego. Es obligatorio y debe ser EN MANTENIMIENTO, OPERATIVO o NO OPERATIVO"}, accesibilidad: {bsonType: "bool", description: "Si el juego es accesible a personas con discapacidad. Es obligatorio y debe ser un booleano"}, fechaInstalacion: {bsonType: "date", description: "Fecha de instalación del juego. Es obligatorio y debe ser una fecha"}, tipo: {bsonType: "string", enum: ["DEPORTIVO", "INFANTIL", "MAYORES"], description: "Tipo de juego. Es obligatorio y debe ser DEPORTIVO, INFANTIL o MAYORES"}, desgasteAcumulado: {bsonType: "int", description: "Desgaste acumulado del juego. Es obligatorio y debe ser un entero"}, indicadorExposicion: {bsonType: "string", enum: ["Alto", "Medio", "Bajo"], description: "Indicador de la exposición del juego. Es obligatorio y debe ser Alto, Medio o Bajo"}, ultimaFechaMantenimiento: {bsonType: ["date"], description: "Última fecha en la que el juego recibió mantenimiento. Si está presente, debe ser una fecha"}, mantenimientos: {bsonType: "array", description: "Referencias a los mantenimientos recibidos por el juego. Debe ser un array de ids de Mantenimiento", items: {bsonType: "string"}}, incidencias: {bsonType: "array", description: "Referencias a las incidencias recibidas por el juego. Debe ser un array de referencias con resumen de Referencia", items: {title: "incidencia", bsonType: "object", required: ["id", "tipoIncidencia", "fechaReporte", "estado"], properties: {id: {bsonType: "string", description: "Id de la incidencia referenciada. Debe ser un string y es obligatorio"}, tipoIncidencia: {bsonType: "string", enum: ["Desgaste", "Rotura", "Vandalismo", "Mal funcionamiento"], description: "Tipo de la incidencia referenciada. Debe ser Desgaste, Rotura, Vandalismo o Mal funcionamiento"}, fechaReporte: {bsonType: "date", description: "Fecha en la que la incidencia referenciada fue reportada. Debe ser una fecha y es obligatorio"}, estado: {bsonType: "string", enum: ["Abierta", "Cerrada"], description: "Estado actual de la incidencia referenciada. Debe ser Abierta o Cerrada"}}}}}}}});
db.JuegosTemp.aggregate([{ \$addFields: { fechaInstalacion: { \$dateFromString: { dateString: "\$fechaInstalacion", format: "%d-%m-%Y" } }, ultimaFechaMantenimiento: { \$dateFromString: { dateString: "\$ultimaFechaMantenimiento", format: "%d-%m-%Y" } }, incidencias: { \$map: { input: "\$incidencias", as: "incidencia", in: { \$mergeObjects: [ "\$\$incidencia", { fechaReporte: { \$dateFromString: { dateString: "\$\$incidencia.fechaReporte", format: "%d-%m-%Y" } } } ] } } } } }, { \$project: { _id: 0 } }, { \$merge: { into: "Juego", on: "id", whenMatched: "merge" } }]);
db.JuegosTemp.drop();
